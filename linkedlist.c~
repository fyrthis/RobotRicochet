//Linked List

typedef struct Task {
   int num;
   struct * Task next;
} Task_t;

void add(Task_t * head, int num) {
    Task_t * current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = malloc(sizeof(Task_t));
    current->next->num = num;
    current->next->next = NULL;
}

void remove(Task_t * head) {
    Task_t * current = head;
    if(current == NULL) { //Liste déjà vide
        return;
    }
    if(current->next == NULL) { //Un seul élément
        free(head);
        head = NULL;
    }
    while (current->next->next != NULL){ //2 ou plus éléments
        current = current->next;
    }
    free(current->next);
    current->next = NULL;
}

int isEmpty(Task_t * head) {
    return head==NULL?0:1;
}

int size(Task_t * head) {
    int i = 0;
    Task_t * current = head;
    for(i = 0; current != NULL ; i++) {
        current = current->next;
    }
    return i;
}

Task_t get(Task_t * head, int i) {
    if(i < 0 || i >= size(head)) {
        return NULL;
    }
    int k = 0;
    Task_t * current = head;
    for(k = 0; k!=i ; k++) {
        current = current->next;
    }
    return current;
}  
